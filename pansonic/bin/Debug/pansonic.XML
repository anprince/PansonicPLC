<?xml version="1.0"?>
<doc>
    <assembly>
        <name>pansonic</name>
    </assembly>
    <members>
        <member name="T:Pansonic.MewtocolClass">
            <summary>
            生产Mewtocol协议的各种命令的命文类 结束符：CR（\r）
            </summary>
        </member>
        <member name="M:Pansonic.MewtocolClass.#ctor">
            <summary>
            默认构造函数 PLC站号默认为1
            </summary>
        </member>
        <member name="M:Pansonic.MewtocolClass.#ctor(System.Int16)">
            <summary>
            构造函数
            </summary>
            <param name="station">站号</param>
        </member>
        <member name="P:Pansonic.MewtocolClass.Station">
            <summary>
            PLC站号
            </summary>
        </member>
        <member name="M:Pansonic.MewtocolClass.RCS(System.String)">
            <summary>
            读取单触点状态协议文
            </summary>
            <param name="d">触点地址</param>
            <returns></returns>
        </member>
        <member name="M:Pansonic.MewtocolClass.WCS(System.String,System.Boolean)">
            <summary>
            写入单触点状态协议文
            </summary>
             <param name="d">触点地址</param>
              <param name="b">开关量true/false</param>
            <returns></returns>
        </member>
        <member name="M:Pansonic.MewtocolClass.RCP(System.String,System.Int32)">
            <summary>
            读取多触点状态协议文
            </summary>
            <param name="d">起始触点地址</param>
            <param name="n">读取触点个数 n=1-8</param>
            <returns></returns>
        </member>
        <member name="M:Pansonic.MewtocolClass.WCP(System.String,System.Int32,System.String)">
            <summary>
            写入多触点状态协议文
            </summary>
            <param name="d">起始触点地址</param>
            <param name="n">写入触点个数 n=1-8</param>
            <param name="staus">写入值， "0"或者"1"</param>
            <returns></returns>
        </member>
        <member name="M:Pansonic.MewtocolClass.RCC(System.String,System.Int32)">
            <summary>
            按字单位读取触点状态协议文
            </summary>
            <param name="d">触点地址</param>
            <param name="n">读取字个数</param>
            <returns></returns>
        </member>
        <member name="M:Pansonic.MewtocolClass.WCC(System.String,System.Int32,System.Int16[])">
            <summary>
            按字单位写入触点状态协议文
            </summary>
            <param name="d">触点地址</param>
            <param name="n">读取字个数</param>
            <param name="inData">short型16位数据数组</param>
            <returns></returns>
        </member>
        <member name="M:Pansonic.MewtocolClass.RD(System.String,System.Int32)">
            <summary>
            读取多个数据寄存器值协议文
            </summary>
            <param name="d">数据寄存器地址</param>
            <param name="n">读取字个数 不大于25</param>
            <returns></returns>
        </member>
        <member name="M:Pansonic.MewtocolClass.WD(System.String,System.Int32,System.Int16[])">
            <summary>
            写入多个数据寄存器值协议文
            </summary>
            <param name="d">首个数据寄存器地址</param>
            <param name="n">写入字个数</param>
            <param name="inData">short型16位数据数组</param>
            <returns></returns>
        </member>
        <member name="M:Pansonic.MewtocolClass.WD(System.String,System.Int16)">
            <summary>
            写入单个16位寄存器值
            </summary>
            <param name="d">数据寄存器地址</param>
            <param name="value">数据寄存器的值</param>
            <returns></returns>
        </member>
        <member name="M:Pansonic.MewtocolClass.BCC(System.String)">
            <summary>
            mewtocol协议BCC校验码计算
            </summary>
            <param name="sendData">要计算校验码的数据</param>
            <returns> </returns>
        </member>
        <member name="M:Pansonic.MewtocolClass.toShortArray(System.Byte[])">
            <summary>
            byte[]数组转为short[]数组
            </summary>
            <param name="src">需要转换的byte数组</param>
            <returns></returns>
        </member>
        <member name="T:Pansonic.PanasonicPLC">
            <summary>
            发送串口命令，返回相应值的松下PLC类
            </summary>
        </member>
        <member name="M:Pansonic.PanasonicPLC.#ctor">
            <summary>
            默认构造函数 要使用需先设置串口连接函数并打开串口 有需要的话需设置PLC站号
            </summary>
        </member>
        <member name="M:Pansonic.PanasonicPLC.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.IO.Ports.Parity)">
            <summary>
            构造函数
            </summary>
            <param name="COMx"></param>
            <param name="baudRate"></param>
            <param name="dataBits"></param>
            <param name="stopBits"></param>
            <param name="parity"></param>
        </member>
        <member name="M:Pansonic.PanasonicPLC.MewtocolSet(System.String,System.Int32,System.Int32,System.Int32,System.IO.Ports.Parity)">
            <summary>
            设置串口连接的各个参数
            </summary>
             <param name="COMx">串口号 "COM0-COM16"</param>
            <param name="baudRate">波特率 9600，19200，38400，57600，115200</param>
            <param name="dataBits">数据位 7（7位），8（8位）</param>
            <param name="stopBits">停止位 1（1位），2（2位）</param>
            <param name="parity">校验 Partity.ODD(奇校验)，Partity.EVEN(偶校验)，Partity.NONE(无校验) ）</param>
            <returns></returns>
        </member>
        <member name="M:Pansonic.PanasonicPLC.IsOpen">
            <summary>
            获取一个值，指示串口是否处于打开状态
            </summary>
            <returns>是或否</returns>
        </member>
        <member name="P:Pansonic.PanasonicPLC.Station">
            <summary>
            松下PLC站号
            </summary>
        </member>
        <member name="M:Pansonic.PanasonicPLC.MewtocolOpen">
            <summary>
            关闭PLC操作对象的串口连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pansonic.PanasonicPLC.MewtocolClose">
            <summary>
            关闭PLC操作对象的串口连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pansonic.PanasonicPLC.GetSendStr">
            <summary>
            读取上一条通讯指令发出的字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pansonic.PanasonicPLC.GetReceiveStr">
            <summary>
            读取上一条通讯指令收到的字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pansonic.PanasonicPLC.CmdAsync(System.String)">
            <summary>
            异步发送指令 返回结果
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Pansonic.PanasonicPLC.Cmd(System.String)">
            <summary>
            发送控制指令，返回结果
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Pansonic.PanasonicPLC.TCmd(System.String)">
            <summary>
            发送控制指令，返回结果 重写 2022.2.26
            不需要事件 直接通过串口
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Pansonic.PanasonicPLC.ReadSinglePoint(System.String)">
            <summary>
             读取单个触点
            </summary>
            <param name="address">触点地址</param>
        </member>
        <member name="M:Pansonic.PanasonicPLC.WriteSinglePoint(System.String,System.Boolean)">
            <summary>
            写入单个触点
            </summary>
            <param name="address">触点地址</param>
            <param name="value">要写入的值true/false</param>
            <returns></returns>
        </member>
        <member name="M:Pansonic.PanasonicPLC.ReadWordPoint(System.String)">
            <summary>
            按字单位读取触点值
            </summary>
            <param name="address">要读取的字单位地址</param>
            <returns></returns>
        </member>
        <member name="M:Pansonic.PanasonicPLC.ReadWordsPoint(System.String,System.Int32)">
            <summary>
            按字单位读取多个字单位的触点值
            </summary>
            <param name="address">字单位 起始点</param>
            <param name="n">读取字数</param>
            <returns></returns>
        </member>
        <member name="M:Pansonic.PanasonicPLC.WriteWordsPoint(System.String,System.Int32,System.Int16[])">
            <summary>
            按字单位写入多字的触点值
            </summary>
            <param name="address">字单位 起始点</param>
            <param name="n">写入字数</param>
            <param name="inData">写入字数组</param>
        </member>
        <member name="M:Pansonic.PanasonicPLC.WriteSingleWordPoint(System.String,System.Int16)">
            <summary>
            按字单位写入单字的触点值
            </summary>
            <param name="address">写入点字单位地址</param>
            <param name="inValue">写入值（short型）</param>
        </member>
        <member name="M:Pansonic.PanasonicPLC.ReadWordDatas(System.String,System.Int32)">
            <summary>
            读取连续多个数据寄存器值
            </summary>
            <param name="address">数据寄存器地址</param>
            <param name="n">读取字个数</param>
            <returns></returns>
        </member>
        <member name="M:Pansonic.PanasonicPLC.ReadSingleData(System.String)">
            <summary>
            读取单个数据寄存器（16位）
            </summary>
            <param name="address">数据寄存器地址</param>
            <returns></returns>
        </member>
        <member name="M:Pansonic.PanasonicPLC.ReadDoubleData(System.String)">
            <summary>
            读取双字数据寄存器
            </summary>
            <param name="address">寄存器地址</param>
            <returns></returns>
        </member>
        <member name="T:Pansonic.SoftBasic">
            <summary>
            一个软件基础类，提供常用的一些静态方法 ->
            A software-based class that provides some common static methods
            </summary>
        </member>
        <member name="M:Pansonic.SoftBasic.CalculateFileMD5(System.String)">
            <summary>
            获取文件的md5码 -> Get the MD5 code of the file
            </summary>
            <param name="filePath">文件的路径，既可以是完整的路径，也可以是相对的路径 -> The path to the file</param>
            <returns>Md5字符串</returns>
            <example>
            下面举例实现获取一个文件的md5码
            <code lang="cs" source="HslCommunication_Net45.Test\Documentation\Samples\BasicFramework\SoftBasicExample.cs" region="CalculateFileMD5Example" title="CalculateFileMD5示例" />
            </example>
        </member>
        <member name="M:Pansonic.SoftBasic.CalculateStreamMD5(System.IO.Stream)">
            <summary>
            获取数据流的md5码 -> Get the MD5 code for the data stream
            </summary>
            <param name="stream">数据流，可以是内存流，也可以是文件流</param>
            <returns>Md5字符串</returns>
            <example>
            下面举例实现获取一个流的md5码
            <code lang="cs" source="HslCommunication_Net45.Test\Documentation\Samples\BasicFramework\SoftBasicExample.cs" region="CalculateStreamMD5Example1" title="CalculateStreamMD5示例" />
            </example>
        </member>
        <member name="M:Pansonic.SoftBasic.CalculateStreamMD5(System.String)">
            <summary>
            获取文本字符串信息的Md5码，编码为UTF8
            </summary>
            <param name="data">文本数据信息</param>
            <returns>Md5字符串</returns>
        </member>
        <member name="M:Pansonic.SoftBasic.CalculateStreamMD5(System.String,System.Text.Encoding)">
            <summary>
            获取文本字符串信息的Md5码，使用指定的编码
            </summary>
            <param name="data">文本数据信息</param>
            <param name="encode">编码信息</param>
            <returns>Md5字符串</returns>
        </member>
        <member name="M:Pansonic.SoftBasic.GetSizeDescription(System.Int64)">
            <summary>
            从一个字节大小返回带单位的描述
            </summary>
            <param name="size">实际的大小值</param>
            <returns>最终的字符串值</returns>
            <example>
            比如说我们获取了文件的长度，这个长度可以来自于本地，也可以来自于数据库查询
            <code lang="cs" source="HslCommunication_Net45.Test\Documentation\Samples\BasicFramework\SoftBasicExample.cs" region="GetSizeDescriptionExample" title="GetSizeDescription示例" />
            </example>
        </member>
        <member name="M:Pansonic.SoftBasic.GetTimeSpanDescription(System.TimeSpan)">
            <summary>
            从一个时间差返回带单位的描述
            </summary>
            <param name="ts">实际的时间差</param>
            <returns>最终的字符串值</returns>
            <example>
            比如说我们获取了一个时间差信息
            <code lang="cs" source="HslCommunication_Net45.Test\Documentation\Samples\BasicFramework\SoftBasicExample.cs" region="GetTimeSpanDescriptionExample" title="GetTimeSpanDescription示例" />
            </example>
        </member>
        <member name="M:Pansonic.SoftBasic.AddArrayData``1(``0[]@,``0[],System.Int32)">
            <summary>
            一个通用的数组新增个数方法，会自动判断越界情况，越界的情况下，会自动的截断或是填充 -> 
            A common array of new methods, will automatically determine the cross-border situation, in the case of cross-border, will be automatically truncated or filled
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="array">原数据</param>
            <param name="data">等待新增的数据</param>
            <param name="max">原数据的最大值</param>
            <example>
            <code lang="cs" source="HslCommunication_Net45.Test\Documentation\Samples\BasicFramework\SoftBasicExample.cs" region="AddArrayDataExample" title="AddArrayData示例" />
            </example>
        </member>
        <member name="M:Pansonic.SoftBasic.ArrayExpandToLength``1(``0[],System.Int32)">
            <summary>
            将一个数组进行扩充到指定长度，或是缩短到指定长度 ->
            Extend an array to a specified length, or shorten to a specified length or fill
            </summary>
            <typeparam name="T">数组的类型</typeparam>
            <param name="data">原先数据的数据</param>
            <param name="length">新数组的长度</param>
            <returns>新数组长度信息</returns>
            <example>
            <code lang="cs" source="HslCommunication_Net45.Test\Documentation\Samples\BasicFramework\SoftBasicExample.cs" region="ArrayExpandToLengthExample" title="ArrayExpandToLength示例" />
            </example>
        </member>
        <member name="M:Pansonic.SoftBasic.ArrayExpandToLengthEven``1(``0[])">
            <summary>
            将一个数组进行扩充到偶数长度 ->
            Extend an array to even lengths
            </summary>
            <typeparam name="T">数组的类型</typeparam>
            <param name="data">原先数据的数据</param>
            <returns>新数组长度信息</returns>
            <example>
            <code lang="cs" source="HslCommunication_Net45.Test\Documentation\Samples\BasicFramework\SoftBasicExample.cs" region="ArrayExpandToLengthEvenExample" title="ArrayExpandToLengthEven示例" />
            </example>
        </member>
        <member name="M:Pansonic.SoftBasic.IsTwoBytesEquel(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            判断两个字节的指定部分是否相同 ->
            Determines whether the specified portion of a two-byte is the same
            </summary>
            <param name="b1">第一个字节</param>
            <param name="start1">第一个字节的起始位置</param>
            <param name="b2">第二个字节</param>
            <param name="start2">第二个字节的起始位置</param>
            <param name="length">校验的长度</param>
            <returns>返回是否相等</returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <example>
            <code lang="cs" source="HslCommunication_Net45.Test\Documentation\Samples\BasicFramework\SoftBasicExample.cs" region="IsTwoBytesEquelExample1" title="IsTwoBytesEquel示例" />
            </example>
        </member>
        <member name="M:Pansonic.SoftBasic.IsTwoBytesEquel(System.Byte[],System.Byte[])">
            <summary>
            判断两个字节的指定部分是否相同 ->
            Determines whether the specified portion of a two-byte is the same
            </summary>
            <param name="b1">第一个字节</param>
            <param name="b2">第二个字节</param>
            <returns>返回是否相等</returns>
            <example>
            <code lang="cs" source="HslCommunication_Net45.Test\Documentation\Samples\BasicFramework\SoftBasicExample.cs" region="IsTwoBytesEquelExample2" title="IsTwoBytesEquel示例" />
            </example>
        </member>
        <member name="M:Pansonic.SoftBasic.IsByteTokenEquel(System.Byte[],System.Guid)">
            <summary>
            判断两个数据的令牌是否相等 ->
            Determines whether the tokens of two data are equal
            </summary>
            <param name="head">字节数据</param>
            <param name="token">GUID数据</param>
            <returns>返回是否相等</returns>
            <example>
            <code lang="cs" source="HslCommunication_Net45.Test\Documentation\Samples\BasicFramework\SoftBasicExample.cs" region="IsTwoTokenEquelExample" title="IsByteTokenEquel示例" />
            </example>
        </member>
        <member name="M:Pansonic.SoftBasic.IsTwoTokenEquel(System.Guid,System.Guid)">
            <summary>
            判断两个数据的令牌是否相等 ->
            Determines whether the tokens of two data are equal
            </summary>
            <param name="token1">第一个令牌</param>
            <param name="token2">第二个令牌</param>
            <returns>返回是否相等</returns>
        </member>
        <member name="M:Pansonic.SoftBasic.GetEnumValues``1">
            <summary>
            获取一个枚举类型的所有枚举值，可直接应用于组合框数据 ->
            Gets all the enumeration values of an enumeration type that can be applied directly to the combo box data
            </summary>
            <typeparam name="TEnum">枚举的类型值</typeparam>
            <returns>枚举值数组</returns>
            <example>
            <code lang="cs" source="HslCommunication_Net45.Test\Documentation\Samples\BasicFramework\SoftBasicExample.cs" region="GetEnumValuesExample" title="GetEnumValues示例" />
            </example>
        </member>
        <member name="M:Pansonic.SoftBasic.GetEnumFromString``1(System.String)">
            <summary>
            从字符串的枚举值数据转换成真实的枚举值数据 ->
            Convert enumeration value data from strings to real enumeration value data
            </summary>
            <typeparam name="TEnum">枚举的类型值</typeparam>
            <param name="value">枚举的字符串的数据值</param>
            <returns>真实的枚举值</returns>
            <example>
            <code lang="cs" source="HslCommunication_Net45.Test\Documentation\Samples\BasicFramework\SoftBasicExample.cs" region="GetEnumFromStringExample" title="GetEnumFromString示例" />
            </example>
        </member>
        <member name="M:Pansonic.SoftBasic.ByteToHexString(System.Byte[])">
            <summary>
            字节数据转化成16进制表示的字符串 ->
            Byte data into a string of 16 binary representations
            </summary>
            <param name="InBytes">字节数组</param>
            <returns>返回的字符串</returns>
            <exception cref="T:System.NullReferenceException"></exception>
            <example>
            <code lang="cs" source="HslCommunication_Net45.Test\Documentation\Samples\BasicFramework\SoftBasicExample.cs" region="ByteToHexStringExample1" title="ByteToHexString示例" />
            </example>
        </member>
        <member name="M:Pansonic.SoftBasic.ByteToHexString(System.Byte[],System.Char)">
            <summary>
            字节数据转化成16进制表示的字符串 ->
            Byte data into a string of 16 binary representations
            </summary>
            <param name="InBytes">字节数组</param>
            <param name="segment">分割符</param>
            <returns>返回的字符串</returns>
            <exception cref="T:System.NullReferenceException"></exception>
            <example>
            <code lang="cs" source="HslCommunication_Net45.Test\Documentation\Samples\BasicFramework\SoftBasicExample.cs" region="ByteToHexStringExample2" title="ByteToHexString示例" />
            </example>
        </member>
        <member name="M:Pansonic.SoftBasic.ByteToHexString(System.String)">
            <summary>
            字符串数据转化成16进制表示的字符串 ->
            String data into a string of 16 binary representations
            </summary>
            <param name="InString">输入的字符串数据</param>
            <returns>返回的字符串</returns>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:Pansonic.SoftBasic.HexStringToBytes(System.String)">
            <summary>
            将16进制的字符串转化成Byte数据，将检测每2个字符转化，也就是说，中间可以是任意字符 ->
            Converts a 16-character string into byte data, which will detect every 2 characters converted, that is, the middle can be any character
            </summary>
            <param name="hex">十六进制的字符串，中间可以是任意的分隔符</param>
            <returns>转换后的字节数组</returns>
            <remarks>参数举例：AA 01 34 A8</remarks>
            <example>
            <code lang="cs" source="HslCommunication_Net45.Test\Documentation\Samples\BasicFramework\SoftBasicExample.cs" region="HexStringToBytesExample" title="HexStringToBytes示例" />
            </example>
        </member>
        <member name="M:Pansonic.SoftBasic.BytesReverseByWord(System.Byte[])">
            <summary>
            将byte数组按照双字节进行反转，如果为单数的情况，则自动补齐 ->
            Reverses the byte array by double byte, or if the singular is the case, automatically
            </summary>
            <param name="inBytes">输入的字节信息</param>
            <returns>反转后的数据</returns>
            <example>
            <code lang="cs" source="HslCommunication_Net45.Test\Documentation\Samples\BasicFramework\SoftBasicExample.cs" region="BytesReverseByWord" title="BytesReverseByWord示例" />
            </example>
        </member>
        <member name="M:Pansonic.SoftBasic.BytesToAsciiBytes(System.Byte[])">
            <summary>
            将原始的byte数组转换成ascii格式的byte数组 ->
            Converts the original byte array to an ASCII-formatted byte array
            </summary>
            <param name="inBytes">等待转换的byte数组</param>
            <returns>转换后的数组</returns>
        </member>
        <member name="M:Pansonic.SoftBasic.AsciiBytesToBytes(System.Byte[])">
            <summary>
            将ascii格式的byte数组转换成原始的byte数组 ->
            Converts an ASCII-formatted byte array to the original byte array
            </summary>
            <param name="inBytes">等待转换的byte数组</param>
            <returns>转换后的数组</returns>
        </member>
        <member name="M:Pansonic.SoftBasic.BoolArrayToByte(System.Boolean[])">
            <summary>
            将bool数组转换到byte数组 ->
            Converting a bool array to a byte array
            </summary>
            <param name="array">bool数组</param>
            <returns>转换后的字节数组</returns>
            <example>
            <code lang="cs" source="HslCommunication_Net45.Test\Documentation\Samples\BasicFramework\SoftBasicExample.cs" region="BoolArrayToByte" title="BoolArrayToByte示例" />
            </example>
        </member>
        <member name="M:Pansonic.SoftBasic.ByteToBoolArray(System.Byte[],System.Int32)">
            <summary>
            从Byte数组中提取位数组，length代表位数 ->
            Extracts a bit array from a byte array, length represents the number of digits
            </summary>
            <param name="InBytes">原先的字节数组</param>
            <param name="length">想要转换的长度，如果超出自动会缩小到数组最大长度</param>
            <returns>转换后的bool数组</returns>
            <example>
            <code lang="cs" source="HslCommunication_Net45.Test\Documentation\Samples\BasicFramework\SoftBasicExample.cs" region="ByteToBoolArray" title="ByteToBoolArray示例" />
            </example> 
        </member>
        <member name="M:Pansonic.SoftBasic.ByteToBoolArray(System.Byte[])">
            <summary>
            从Byte数组中提取所有的位数组 ->
            Extracts a bit array from a byte array, length represents the number of digits
            </summary>
            <param name="InBytes">原先的字节数组</param>
            <returns>转换后的bool数组</returns>
            <example>
            <code lang="cs" source="HslCommunication_Net45.Test\Documentation\Samples\BasicFramework\SoftBasicExample.cs" region="ByteToBoolArray" title="ByteToBoolArray示例" />
            </example> 
        </member>
        <member name="M:Pansonic.SoftBasic.SpliceTwoByteArray(System.Byte[],System.Byte[])">
            <summary>
            拼接2个字节数组成一个数组 ->
            Splicing 2 bytes to to an array
            </summary>
            <param name="bytes1">数组一</param>
            <param name="bytes2">数组二</param>
            <returns>拼接后的数组</returns>
            <example>
            <code lang="cs" source="HslCommunication_Net45.Test\Documentation\Samples\BasicFramework\SoftBasicExample.cs" region="SpliceTwoByteArray" title="SpliceTwoByteArray示例" />
            </example> 
        </member>
        <member name="M:Pansonic.SoftBasic.BytesArrayRemoveBegin(System.Byte[],System.Int32)">
            <summary>
            将一个byte数组的前面指定位数移除，返回新的一个数组 ->
            Removes the preceding specified number of bits in a byte array, returning a new array
            </summary>
            <param name="value">字节数组</param>
            <param name="length">等待移除的长度</param>
            <returns>新的数据</returns>
            <example>
            <code lang="cs" source="HslCommunication_Net45.Test\Documentation\Samples\BasicFramework\SoftBasicExample.cs" region="BytesArrayRemoveBegin" title="BytesArrayRemoveBegin示例" />
            </example> 
        </member>
        <member name="M:Pansonic.SoftBasic.BytesArrayRemoveLast(System.Byte[],System.Int32)">
            <summary>
            将一个byte数组的后面指定位数移除，返回新的一个数组 ->
            Removes the specified number of digits after a byte array, returning a new array
            </summary>
            <param name="value">字节数组</param>
            <param name="length">等待移除的长度</param>
            <returns>新的数据</returns>
            <example>
            <code lang="cs" source="HslCommunication_Net45.Test\Documentation\Samples\BasicFramework\SoftBasicExample.cs" region="BytesArrayRemoveLast" title="BytesArrayRemoveLast示例" />
            </example> 
        </member>
        <member name="M:Pansonic.SoftBasic.BytesArrayRemoveDouble(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将一个byte数组的前后移除指定位数，返回新的一个数组 ->
            Removes a byte array before and after the specified number of bits, returning a new array
            </summary>
            <param name="value">字节数组</param>
            <param name="leftLength">前面的位数</param>
            <param name="rightLength">后面的位数</param>
            <returns>新的数据</returns>
            <example>
            <code lang="cs" source="HslCommunication_Net45.Test\Documentation\Samples\BasicFramework\SoftBasicExample.cs" region="BytesArrayRemoveDouble" title="BytesArrayRemoveDouble示例" />
            </example> 
        </member>
        <member name="M:Pansonic.SoftBasic.DeepClone(System.Object)">
            <summary>
            使用序列化反序列化深度克隆一个对象，该对象需要支持序列化特性 ->
            Cloning an object with serialization deserialization depth that requires support for serialization attributes
            </summary>
            <param name="oringinal">源对象，支持序列化</param>
            <returns>新的一个实例化的对象</returns>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.NonSerializedAttribute"></exception>
            <remarks>
            <note type="warning">
            <paramref name="oringinal"/> 参数必须实现序列化的特性
            </note>
            </remarks>
            <example>
            <code lang="cs" source="HslCommunication_Net45.Test\Documentation\Samples\BasicFramework\SoftBasicExample.cs" region="DeepClone" title="DeepClone示例" />
            </example>
        </member>
        <member name="M:Pansonic.SoftBasic.GetUniqueStringByGuidAndRandom">
            <summary>
            获取一串唯一的随机字符串，长度为20，由Guid码和4位数的随机数组成，保证字符串的唯一性 ->
            Gets a string of unique random strings with a length of 20, consisting of a GUID code and a 4-digit random number to guarantee the uniqueness of the string
            </summary>
            <returns>随机字符串数据</returns>
            <example>
            <code lang="cs" source="HslCommunication_Net45.Test\Documentation\Samples\BasicFramework\SoftBasicExample.cs" region="GetUniqueStringByGuidAndRandom" title="GetUniqueStringByGuidAndRandom示例" />
            </example>
        </member>
    </members>
</doc>
